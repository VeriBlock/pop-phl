name: CI

on:
  push:
    branches:
      - master
      - feature/*
  pull_request:
    branches:
      - master

jobs:
  linux:
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@v1
        with:
          path: main
      - name: Extract branch name & commit
        id: extract_branch
        run: |
          echo "::set-output name=git_hash::$(git rev-parse --short=7 "$GITHUB_SHA")"
          echo "::set-output name=branch::$(echo ${GITHUB_REF#refs/heads/} | sed 's/\//\./g')"
          echo "::set-output name=commits_ahead::$(git rev-list $(git describe --tags $(git rev-list --tags --max-count=1)).. --count)"
          echo "::set-output name=last_tag::$(git describe --tags $(git rev-list --tags --max-count=1))"
      - name: Prepare ccache timestamp
        id: cache_timestamp
        run: |
          current_date=`date --utc +%Y%m%d_%H%M%SZ`
          echo "::set-output name=timestamp::${current_date}"
      - name: ccache cache files
        uses: actions/cache@v1.1.0
        with:
          path: ~/.ccache
          key: linux-ccache-${{ steps.cache_timestamp.outputs.timestamp }}
          restore-keys: |
            linux-ccache-
      - name: get version for veriblock-pop-cpp
        run: echo "::set-env name=VERIBLOCK_POP_CPP_VERSION::$(awk -F '=' '/\$\(package\)_version/{print $NF}' $PWD/depends/packages/veriblock-pop-cpp.mk | head -n1)"
      - name: veriblock-pop-cpp release version
        run: echo Using veriblock-pop-cpp version $VERIBLOCK_POP_CPP_VERSION
      - name: add bitcoin ppa
        run: sudo add-apt-repository ppa:bitcoin/bitcoin
      - name: install build requirements
        run: sudo apt-get install build-essential libtool autotools-dev automake pkg-config bsdmainutils python3 ccache
      - name: install dependencies
        run: sudo apt-get install libevent-dev python3-zmq python3-dev libboost-python-dev libboost-system-dev libboost-filesystem-dev libboost-test-dev libboost-thread-dev libminiupnpc-dev libzmq3-dev libdb4.8-dev libdb4.8++-dev
      - name: install veriblock-pop-cpp
        env:
          BUILD_TYPE: Release
        run: |
          (
          cd /opt;
          wget https://github.com/VeriBlock/alt-integration-cpp/archive/${VERIBLOCK_POP_CPP_VERSION}.tar.gz;
          tar -xf ${VERIBLOCK_POP_CPP_VERSION}.tar.gz;
          cd alt-integration-cpp-${VERIBLOCK_POP_CPP_VERSION};
          mkdir build;
          cd build;
          cmake .. -DCMAKE_BUILD_TYPE=${BUILD_TYPE} -DTESTING=OFF -DWITH_PYPOPMINER=ON;
          make -j2;
          sudo make install
          )
      - name: autogen
        run: ./autogen.sh
      - name: configure
        run: ./configure
          --disable-bench
          --disable-gmock
          --disable-test
          --disable-man
      - name: make
        run: make -j2
      - name: Post status to Discord
        uses: sarisia/actions-status-discord@v1
        if: always()
        with:
          webhook: ${{ secrets.DISCORD_WEBHOOK }}
          status: ${{ job.status }}
          job: linux build
          description: native ubuntu 18.04 build
          nofail: true
      - name: create artifacts
        if: success()
        run: |
          mkdir -p ./release
          mv ./src/placehd ./release/
          mv ./src/placeh-cli ./release/
          mv ./src/placeh-tx ./release/
          mv ./src/placeh-wallet ./release/
          strip ./release/placeh*
          mv ./release placeh-${{ steps.extract_branch.outputs.last_tag }}-${{ steps.extract_branch.outputs.branch }}.${{ steps.extract_branch.outputs.commits_ahead }}-${{ steps.extract_branch.outputs.git_hash }}
      - name: placeh-${{ steps.extract_branch.outputs.last_tag }}-${{ steps.extract_branch.outputs.branch }}.${{ steps.extract_branch.outputs.commits_ahead }}-${{ steps.extract_branch.outputs.git_hash }}-x86_64-linux-gnu
        if: success()
        uses: actions/upload-artifact@v2
        with:
          name: placeh-${{ steps.extract_branch.outputs.last_tag }}-${{ steps.extract_branch.outputs.branch }}.${{ steps.extract_branch.outputs.commits_ahead }}-${{ steps.extract_branch.outputs.git_hash }}-x86_64-linux-gnu
          path: placeh-${{ steps.extract_branch.outputs.last_tag }}-${{ steps.extract_branch.outputs.branch }}.${{ steps.extract_branch.outputs.commits_ahead }}-${{ steps.extract_branch.outputs.git_hash }}

  x86_64-w64-mingw32:
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@v1
      - name: Extract branch name & commit
        id: extract_branch
        run: |
          echo "::set-output name=git_hash::$(git rev-parse --short=7 "$GITHUB_SHA")"
          echo "::set-output name=branch::$(echo ${GITHUB_REF#refs/heads/} | sed 's/\//\./g')"
          echo "::set-output name=commits_ahead::$(git rev-list $(git describe --tags $(git rev-list --tags --max-count=1)).. --count)"
          echo "::set-output name=last_tag::$(git describe --tags $(git rev-list --tags --max-count=1))"
          echo "::set-output name=version::$(cat configure.ac | head -n4 | tail -n3 | sed 's/[^[:digit:]]//g;' | sed ':a;N;$!ba;s/\n/./g')"
      - name: Prepare ccache timestamp
        id: cache_timestamp
        run: |
          current_date=`date --utc +%Y%m%d_%H%M%SZ`
          echo "::set-output name=timestamp::${current_date}"
      - name: depends cache files
        uses: actions/cache@v1.1.0
        with:
          path: ~/.depends_cache
          key: mingw32-depends-${{ steps.cache_timestamp.outputs.timestamp }}
          restore-keys: |
            mingw32-depends-
      - name: ccache cache files
        uses: actions/cache@v1.1.0
        with:
          path: ~/.ccache
          key: mingw32-ccache-${{ steps.cache_timestamp.outputs.timestamp }}
          restore-keys: |
            mingw32-ccache-
      - name: install build requirements
        run: sudo apt-get install build-essential libtool autotools-dev automake pkg-config bsdmainutils curl g++-mingw-w64-x86-64 mingw-w64-x86-64-dev ccache
      - name: set the default mingw32 g++ compiler option to posix
        run: sudo update-alternatives --set x86_64-w64-mingw32-g++ /usr/bin/x86_64-w64-mingw32-g++-posix
      - name: set the default mingw32 gcc compiler option to posix
        run: sudo update-alternatives --set x86_64-w64-mingw32-gcc /usr/bin/x86_64-w64-mingw32-gcc-posix
      - name: strip out problematic Windows %PATH% imported var
        run: PATH=$(echo "$PATH" | sed -e 's/:\/mnt.*//g')
      - name: set host variable and build dependencies for x86_64-w64
        env:
          HOST: x86_64-w64-mingw32
          BASE_CACHE: ~/.depends_cache
        run: cd depends && make -j$(nproc)
      - name: autogen
        run: ./autogen.sh
      - name: configure
        run: CONFIG_SITE=$PWD/depends/x86_64-w64-mingw32/share/config.site ./configure --prefix=/ --disable-bench --disable-man --disable-gmock
      - name: make
        run: make -j2
      - name: Post status to Discord
        uses: sarisia/actions-status-discord@v1
        if: always()
        with:
          webhook: ${{ secrets.DISCORD_WEBHOOK }}
          status: ${{ job.status }}
          job: win64 build
          description: mingw32 x86_64 windows build
          nofail: true

#  x86_64-apple-darwin16:
#    runs-on: ubuntu-latest
#    steps:
#      - name: checkout
#        uses: actions/checkout@v1
#        with:
#          path: main
#      - name: Extract branch name & commit
#        id: extract_branch
#        run: |
#          echo "::set-output name=git_hash::$(git rev-parse --short=7 "$GITHUB_SHA")"
#          echo "::set-output name=branch::$(echo ${GITHUB_REF#refs/heads/} | sed 's/\//\./g')"
#          echo "::set-output name=commits_ahead::$(git rev-list $(git describe --tags $(git rev-list --tags --max-count=1)).. --count)"
#          echo "::set-output name=last_tag::$(git describe --tags $(git rev-list --tags --max-count=1))"
#          echo "::set-output name=version::$(cat configure.ac | head -n4 | tail -n3 | sed 's/[^[:digit:]]//g;' | sed ':a;N;$!ba;s/\n/./g')"
#      - name: Prepare ccache timestamp
#        id: cache_timestamp
#        run: |
#          current_date=`date --utc +%Y%m%d_%H%M%SZ`
#          echo "::set-output name=timestamp::${current_date}"
#      - name: depends cache files
#        if: github.event_name == 'push' || github.event_name == 'pull_request'
#        uses: actions/cache@v1.1.0
#        with:
#          path: ~/.depends_cache
#          key: darwin-depends-${{ steps.cache_timestamp.outputs.timestamp }}
#          restore-keys: |
#            darwin-depends-
#      - name: ccache cache files
#        if: github.event_name == 'push' || github.event_name == 'pull_request'
#        uses: actions/cache@v1.1.0
#        with:
#          path: ~/.ccache
#          key: darwin-ccache-${{ steps.cache_timestamp.outputs.timestamp }}
#          restore-keys: |
#            darwin-ccache-
#      - name: install build requirements
#        run: sudo apt-get install curl librsvg2-bin libtiff-tools bsdmainutils cmake imagemagick libcap-dev libz-dev libbz2-dev python3-setuptools ccache
#      - name: download and extract macos sdk
#        run: |
#          wget -P depends/sdk-sources https://github.com/phracker/MacOSX-SDKs/releases/download/10.15/MacOSX10.14.sdk.tar.xz
#          mkdir -p depends/SDKs
#          tar -xf depends/sdk-sources/MacOSX10.14.sdk.tar.xz -C depends/SDKs
#      - name: set variables and build dependencies for x86_64-apple-darwin16
#        env:
#          BUILD_TYPE: Release
#          HOST: x86_64-apple-darwin16
#          BASE_CACHE: ~/.depends_cache
#        run: cd depends && make -j2
#      - name: autogen
#        run: ./autogen.sh
#      - name: configure
#        run: ./configure --prefix=${PWD}/depends/x86_64-apple-darwin16
#          --disable-shared
#          --disable-bench
#          --without-qtdbus
#          --disable-man
#      - name: make
#        run: make -j2 deploy

#  macos-native:
#    runs-on: macos-latest
#    steps:
#      - name: checkout
#        uses: actions/checkout@v1
#        with:
#          path: main
#      - name: Extract branch name & commit
#        id: extract_branch
#        run: |
#         echo "::set-output name=git_hash::$(git rev-parse --short=7 "$GITHUB_SHA")"
#         echo "::set-output name=branch::$(echo ${GITHUB_REF#refs/heads/} | sed 's/\//\./g')"
#         echo "::set-output name=commits_ahead::$(git rev-list $(git describe --tags $(git rev-list --tags --max-count=1)).. --count)"
#         echo "::set-output name=last_tag::$(git describe --tags $(git rev-list --tags --max-count=1))"
#     - name: Prepare ccache timestamp
#       id: cache_timestamp
#       run: |
#         current_date=`date +%Y%m%d_%H%M%SZ`
#         echo "::set-output name=timestamp::${current_date}"
#     - name: ccache cache files
#       uses: actions/cache@v1.1.0
#       with:
#         path: ~/.ccache
#         key: macos-ccache-${{ steps.cache_timestamp.outputs.timestamp }}
#         restore-keys: |
#           macos-ccache-
#      - name: get version for veriblock-pop-cpp
#        run: echo "::set-env name=VERIBLOCK_POP_CPP_VERSION::$(awk -F '=' '/\$\(package\)_version/{print $NF}' $PWD/depends/packages/veriblock-pop-cpp.mk | head -n1)"
#      - name: veriblock-pop-cpp release version
#        run: echo Using veriblock-pop-cpp version $VERIBLOCK_POP_CPP_VERSION
#      - name: install homebrew
#        run: /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)"
#      - name: install dependencies
#        run: |
#          brew install automake berkeley-db4 libtool boost miniupnpc openssl pkg-config protobuf python3 libevent librsvg ccache qrencode zeromq
#          brew install https://raw.githubusercontent.com/Homebrew/homebrew-core/d468bb8c4f5c34b18588e5d1b955021d58e1ff57/Formula/qt.rb
#      - name: install veriblock-pop-cpp
#        env:
#          BUILD_TYPE: Release
#        run: |
#          (
#          cd /tmp;
#          wget https://github.com/VeriBlock/alt-integration-cpp/archive/${VERIBLOCK_POP_CPP_VERSION}.tar.gz;
#          tar -xf ${VERIBLOCK_POP_CPP_VERSION}.tar.gz;
#          cd alt-integration-cpp-${VERIBLOCK_POP_CPP_VERSION};
#          mkdir build;
#          cd build;
#          cmake .. -DCMAKE_BUILD_TYPE=${BUILD_TYPE} -DTESTING=OFF;
#          make -j2;
#          sudo make install
#          )
#      - name: autogen
#        run: ./autogen.sh
#      - name: configure
#        run: ./configure --disable-bench --disable-man
#      - name: make
#        run: make -j2
#      - name: Post status to Discord
#        uses: sarisia/actions-status-discord@v1
#        if: always()
#        with:
#          webhook: ${{ secrets.DISCORD_WEBHOOK }}
#          status: ${{ job.status }}
#          job: macos build
#          description: native mac osx build
#         nofail: true
